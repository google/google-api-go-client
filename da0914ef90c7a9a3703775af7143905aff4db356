{
  "comments": [
    {
      "key": {
        "uuid": "ede0d714_4ceedf42",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8420
      },
      "writtenOn": "2016-12-02T19:19:54Z",
      "side": 1,
      "message": "Higher-order question: to avoid folks accidentally depending on this, could we instead put the import path as:\n\ngoogle.golang.org/api/google-api-go-generator/internal/disco\n\nOr do we need to read discovery docs elsewhere?",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbd63e5_f798c009",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-12-02T19:38:12Z",
      "side": 1,
      "message": "Will do. Let me commit this and then do the move as its own CL.",
      "parentUuid": "ede0d714_4ceedf42",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d506749_7346379d",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-12-02T18:11:04Z",
      "side": 1,
      "message": "why is this returning a pointer?",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbd63e5_372cf806",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-12-02T19:10:01Z",
      "side": 1,
      "message": "My default is to return pointers to structs. I only return the actual struct if it\u0027s very small, or if it\u0027s kind of small and I think allocation will matter. This struct may be fairly large.",
      "parentUuid": "6d506749_7346379d",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d506749_9355cb40",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-12-02T18:11:04Z",
      "side": 1,
      "message": "why is this a pointer receiver? i like using ptr receivers when I am modifying data on the receiver. This is just a field accessor.",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbd63e5_d7fb7c56",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-12-02T19:10:01Z",
      "side": 1,
      "message": "Pointer receivers are also more efficient. Calls with value receivers copy the receiver, which I want to avoid.",
      "parentUuid": "6d506749_9355cb40",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d506749_13841b9b",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-12-02T18:11:04Z",
      "side": 1,
      "message": "why is auth the receiver here? that makes no sense to me. the auth is not doing the unmarshaling.\nI would prefer to see the signature looking more like the encoding/json Unmarshal, eg:\nfunc UnmarshalJSON(data []byte, a *Auth) error {}",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbd63e5_97f50464",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-12-02T19:10:01Z",
      "side": 1,
      "message": "No choice. See https://godoc.org/encoding/json#Unmarshaler.",
      "parentUuid": "6d506749_13841b9b",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d506749_7314776d",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-12-02T18:11:04Z",
      "side": 1,
      "message": "a quick comment here about what you are doing would be good.\nsomething like, \"pull out only oauth2 scopes data\"",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbd63e5_7750307d",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-12-02T19:10:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d506749_7314776d",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ede0d714_ecfc6b01",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 8420
      },
      "writtenOn": "2016-12-02T19:19:54Z",
      "side": 1,
      "message": "Instead of using map[string]interface{}, what if you did something more like...\n\nvar m struct {\n  OAuth2 struct {\n    Scopes map[string]struct {\n      Description string\n    }\n  } `json:\"oauth2\"`\n}\njson.Unmarshal(data, \u0026m)\n// ...\n\nSomewhat more typesafe and clear what you\u0027re doing, and avoids the need for jobj/jsObj.",
      "range": {
        "startLine": 69,
        "startChar": 5,
        "endLine": 69,
        "endChar": 6
      },
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbd63e5_f76fa018",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-12-02T19:38:12Z",
      "side": 1,
      "message": "Nice. Done.",
      "parentUuid": "ede0d714_ecfc6b01",
      "range": {
        "startLine": 69,
        "startChar": 5,
        "endLine": 69,
        "endChar": 6
      },
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d506749_531973a1",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-12-02T18:11:04Z",
      "side": 1,
      "message": "that\u0027s a lot of type-assert on one line with no \u0027ok\u0027 check.\ni\u0027d be more comfortable if we used the \u0027blah, ok\u0027 pattern for each of these type-asserts, b/c we are not creating this data. if the server sends us garbage or \u0027null\u0027 by accident here, we will panic.",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbd63e5_37051879",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-12-02T19:10:01Z",
      "side": 1,
      "message": "Good point. Done, in a slightly different way.",
      "parentUuid": "6d506749_531973a1",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d506749_f359a778",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-12-02T18:11:04Z",
      "side": 1,
      "message": "again, I think this should be a value receiver.",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d506749_b31e0f89",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-12-02T18:11:04Z",
      "side": 1,
      "message": "i read this func name initially as job-j. what is it supposed to be? j-obj? a better name would be good. maybe, deepAccess?",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbd63e5_57088c90",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-12-02T19:10:01Z",
      "side": 1,
      "message": "Me too! I stole it from the generator (google-api-go-generator/gen.go in this repo). I will happily change the name.",
      "parentUuid": "6d506749_b31e0f89",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ede0d714_4c401f72",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 8420
      },
      "writtenOn": "2016-12-02T19:19:54Z",
      "side": 1,
      "message": "Even after staring at jobj for days on end, I would still occasionally forget it was for \"Javascript OBJect\".\n\nI like jsObj as a name.",
      "parentUuid": "4dbd63e5_57088c90",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbd63e5_376e3819",
        "filename": "gensupport/disco/disco.go",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-12-02T19:38:12Z",
      "side": 1,
      "message": "I was able to get rid of this thanks to your idea, but if/when it comes back I\u0027ll call it jsObj.",
      "parentUuid": "ede0d714_4c401f72",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d506749_93230bcc",
        "filename": "gensupport/disco/disco_test.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-12-02T18:11:04Z",
      "side": 1,
      "message": "it would be great to have some unit tests for ReadDocument and UnmarshalJSON with failure cases",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbd63e5_77395033",
        "filename": "gensupport/disco/disco_test.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-12-02T19:10:01Z",
      "side": 1,
      "message": "I added a few of these.\n\nIt\u0027s important to remember the context: this supports a command-line code generator. It processes a complex JSON document that could go wrong in many ways (missing name, version doesn\u0027t start with \"v\", and on and on). All the discovery docs ultimately come from google URLs, and many other tools have digested them by the time we get to them.\n\nAll that means that it wouldn\u0027t make sense to put a lot of engineering effort into thoroughly validating the discovery doc input. Things are unlikely to go wrong, and if they do at worst our code generator will panic.\n\nAlso consider what this is replacing: the code generator now just pulls stuff out of map[string]interface{}\u0027s all over the place. This will be a big step forward.\n\nThat said, you\u0027ll see a lot more validation happen in the init() method when it gets fleshed out.",
      "parentUuid": "6d506749_93230bcc",
      "revId": "da0914ef90c7a9a3703775af7143905aff4db356",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}