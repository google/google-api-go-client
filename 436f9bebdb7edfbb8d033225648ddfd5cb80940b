{
  "comments": [
    {
      "key": {
        "uuid": "6536b211_506e9a31",
        "filename": "iterator/examples_test.go",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 5140
      },
      "writtenOn": "2016-08-26T01:56:45Z",
      "side": 1,
      "message": "nit: {{with .Next}} ?pageToken\u003d{{.}} {{end}}",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 39,
        "endChar": 10
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_70691ec4",
        "filename": "iterator/examples_test.go",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T02:58:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6536b211_506e9a31",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 39,
        "endChar": 10
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_d0610a3e",
        "filename": "iterator/examples_test.go",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 5140
      },
      "writtenOn": "2016-08-26T01:56:45Z",
      "side": 1,
      "message": "To promote good practice: emit content type HTML/utf-8 here.",
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_907dc27a",
        "filename": "iterator/examples_test.go",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T02:58:42Z",
      "side": 1,
      "message": "Done (I think; cargo-culted from a search.)",
      "parentUuid": "6536b211_d0610a3e",
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_f041ae96",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 5140
      },
      "writtenOn": "2016-08-26T01:56:45Z",
      "side": 1,
      "message": "If zero, the iterator will begin with the first eligible item.",
      "range": {
        "startLine": 39,
        "startChar": 1,
        "endLine": 39,
        "endChar": 26
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_b073a6a9",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T02:58:42Z",
      "side": 1,
      "message": "Done, sort of. I\u0027m not sure why you highlighted the text you did.",
      "parentUuid": "6536b211_f041ae96",
      "range": {
        "startLine": 39,
        "startChar": 1,
        "endLine": 39,
        "endChar": 26
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_104532a3",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 5140
      },
      "writtenOn": "2016-08-26T01:56:45Z",
      "side": 1,
      "message": "Add:\n\nIf zero, the maximum number of items will be determined by the underlying API\u0027s default.\n(or similar)",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 77
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_30b15646",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T02:58:42Z",
      "side": 1,
      "message": "Done, using the standard doc we already had in the iterator guidelines.",
      "parentUuid": "6536b211_104532a3",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 77
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_d050ea34",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 5140
      },
      "writtenOn": "2016-08-26T01:56:45Z",
      "side": 1,
      "message": "What is the contract for the returned nextPageToken? What, if any, is the contract to what it does to the underlying buffer?",
      "range": {
        "startLine": 48,
        "startChar": 1,
        "endLine": 48,
        "endChar": 61
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_d0bf4a0d",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T02:58:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6536b211_d050ea34",
      "range": {
        "startLine": 48,
        "startChar": 1,
        "endLine": 48,
        "endChar": 61
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_70d8feea",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 54,
      "author": {
        "id": 5140
      },
      "writtenOn": "2016-08-26T01:56:45Z",
      "side": 1,
      "message": "// Function that clears the iterator\u0027s buffer, returning any currently buffered items.\n\nWe shouldn\u0027t dictate how the underlying iterator does its job.",
      "range": {
        "startLine": 54,
        "startChar": 4,
        "endLine": 54,
        "endChar": 79
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_70bbde23",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 54,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T02:58:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6536b211_70d8feea",
      "range": {
        "startLine": 54,
        "startChar": 4,
        "endLine": 54,
        "endChar": 79
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e518e2be_05a6b2a8",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 5505
      },
      "writtenOn": "2016-08-26T01:21:00Z",
      "side": 1,
      "message": "AKAICT it\u0027s critical for the correctness of this code that the iterator stores the error returned by next and supplies it to the next invocation of next (e.g. so that we can distinguish between [an empty token because we haven\u0027t started] vs [an empty token because we\u0027re done]). Rather than relying on that, can you store the error in PageInfo? You could still return it so that the iterator can return it to the caller, but you wouldn\u0027t need to take it as a parameter here.  It also looks like Pager could rely on PageInfo.err instead of using its own err field.\n\nThis is all a bit subtle, though, so maybe there\u0027s something I\u0027ve missed. If you do in fact need to store the error state outside of PageInfo, can you please at least document more explicitly that callers of next *must* pass the error value that next previously returned (if any)?",
      "range": {
        "startLine": 88,
        "startChar": 3,
        "endLine": 88,
        "endChar": 89
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e518e2be_e5955632",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 5505
      },
      "writtenOn": "2016-08-26T01:21:00Z",
      "side": 1,
      "message": "takes",
      "range": {
        "startLine": 88,
        "startChar": 6,
        "endLine": 88,
        "endChar": 10
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_5054da32",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T01:50:24Z",
      "side": 1,
      "message": "You\u0027re right, the iterator must store the error and pass it back in.\n\nTo do what you suggest without exporting the error field of PageInfo would require some sort of back door. For instance, NewPageInfo could return a pointer to the field as a second return value. Then the iterator would have to store *that*; but at least it wouldn\u0027t have to manipulate it.\n\nI think that design is slightly better, so I\u0027ll implement it if you agree and we don\u0027t think of anything better.",
      "parentUuid": "e518e2be_05a6b2a8",
      "range": {
        "startLine": 88,
        "startChar": 3,
        "endLine": 88,
        "endChar": 89
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_503dfae0",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T01:50:24Z",
      "side": 1,
      "message": "Fixed locally. Won\u0027t upload a new patch set for this, esp. since it may go away.",
      "parentUuid": "e518e2be_e5955632",
      "range": {
        "startLine": 88,
        "startChar": 6,
        "endLine": 88,
        "endChar": 10
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e518e2be_65d4c6f1",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 5505
      },
      "writtenOn": "2016-08-26T03:22:21Z",
      "side": 1,
      "message": "Why does the iterator need access to the error apart from when it calls next?  Looking at ItemIterator in iterator_test.go, it returns any error that nextFunc returns, and also stores it in it.err, but it does not use it.err anywhere else. Might other iterators need to hang on to the error for longer?\n\nPager is in the same package as PageInfo, so it could access err directly anyway.",
      "parentUuid": "6536b211_5054da32",
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_dbe64bdd",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T03:50:26Z",
      "side": 1,
      "message": "I guess you\u0027re right. Maybe there\u0027s no case where an iterator will need the PageInfo.err.\n\nI did this, and also swapped the return values to put error second.\n\nI believe I could now further simplify the contract between PageInfo.next and the iterator\u0027s Next method. But let me leave that for a followup CL, where I will also write more thorough tests. I can work on that in parallel with a number of other CLs for which this is a prereq.",
      "parentUuid": "e518e2be_65d4c6f1",
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_fbca2f18",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T04:30:36Z",
      "side": 1,
      "message": "I went ahead and simplified next further by adding another field to PageInfo.\n\nThanks to Dave\u0027s +2 I\u0027m going to submit now to make progress, but PTAL. I will also be writing more tests.",
      "parentUuid": "6536b211_dbe64bdd",
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_50ab3a20",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 5140
      },
      "writtenOn": "2016-08-26T01:56:45Z",
      "side": 1,
      "message": "How do we know there\u0027s an element in the buffer?",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 20
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_10fc12cf",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T02:58:42Z",
      "side": 1,
      "message": "Good catch. That\u0027s a bug.",
      "parentUuid": "6536b211_50ab3a20",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 20
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c563de25_74374802",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T03:50:26Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "6536b211_10fc12cf",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 20
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_f07c0ec1",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 108,
      "author": {
        "id": 5140
      },
      "writtenOn": "2016-08-26T01:56:45Z",
      "side": 1,
      "message": "Should this be `return err, true` ?",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 108,
        "endChar": 11
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_f0f88edc",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 108,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T02:58:42Z",
      "side": 1,
      "message": "Yes. Another bug.\n\nAfter I get this CL in, I\u0027ll have a followup with more thorough tests.",
      "parentUuid": "6536b211_f07c0ec1",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 108,
        "endChar": 11
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e518e2be_659b2661",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 174,
      "author": {
        "id": 5505
      },
      "writtenOn": "2016-08-26T01:21:00Z",
      "side": 1,
      "message": "if p.pageInfo.nextCalled {\n\tp.err \u003d errMixed\n}\nif p.err !\u003d nil {\n\treturn \"\", p.err\n}\n\n?",
      "range": {
        "startLine": 168,
        "startChar": 1,
        "endLine": 174,
        "endChar": 2
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_d0674a20",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 174,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T01:50:24Z",
      "side": 1,
      "message": "I\u0027d rather not overwrite whatever error has already been set. My general rule has been to always return the same error once the iterator is in an error state. The exceptions are errors due to a bad slicep arg, which are specific to the particular invocation of the method.",
      "parentUuid": "e518e2be_659b2661",
      "range": {
        "startLine": 168,
        "startChar": 1,
        "endLine": 174,
        "endChar": 2
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_7063de16",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 180,
      "author": {
        "id": 5140
      },
      "writtenOn": "2016-08-26T01:56:45Z",
      "side": 1,
      "message": "You could actually do this at NewPager time.\n\nMaybe this is beyond scope, but I think we only need assignability [1]. For example, it should be valid to load from an iterator into a *[]interface{}. ymmv.\n\nif vslicep.Kind() !\u003d reflect.Ptr || vslicep.Elem().Kind !\u003d reflect.Slice {\n  // Must be slice pointer\n}\n\nelemtype :\u003d reflect.TypeOf(p.pageInfo.takeBuf()).Elem()\n\nif sliceelem :\u003d vslicep.Type().Elem.Elem(); !elemtype.AssignableTo(sliceelem) {\n  // Must be assignable, but isn\u0027t.\n}\n\n\n[1] https://golang.org/pkg/reflect/#Append",
      "range": {
        "startLine": 180,
        "startChar": 1,
        "endLine": 180,
        "endChar": 77
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_90e14229",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 180,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T02:58:42Z",
      "side": 1,
      "message": "Good points. Will do in a followup CL.",
      "parentUuid": "6536b211_7063de16",
      "range": {
        "startLine": 180,
        "startChar": 1,
        "endLine": 180,
        "endChar": 77
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5afcaab_db585367",
        "filename": "iterator/iterator.go",
        "patchSetId": 7
      },
      "lineNbr": 180,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T18:26:06Z",
      "side": 1,
      "message": "I tried this, but I\u0027m not going to do it. Now I make a single call to reflect.AppendSlice. This way I\u0027d need a loop of reflect.Append. I\u0027m a little worried about the performance hit. \n\nWe can always add this later if there is a request, but it will be much harder to remove it.",
      "parentUuid": "6536b211_7063de16",
      "range": {
        "startLine": 180,
        "startChar": 1,
        "endLine": 180,
        "endChar": 77
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_50269ad2",
        "filename": "iterator/iterator_test.go",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 5140
      },
      "writtenOn": "2016-08-26T01:56:45Z",
      "side": 1,
      "message": "I think you want to check some other boundary conditions: for example, I\u0027d particularly like to see cases of end \u003d\u003d 0, 3. (And maybe with non-standard page sizes to, for example 1).",
      "range": {
        "startLine": 99,
        "startChar": 1,
        "endLine": 99,
        "endChar": 37
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6536b211_306e7698",
        "filename": "iterator/iterator_test.go",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-26T02:58:42Z",
      "side": 1,
      "message": "Yes, will do in a followup. This is mostly about getting the design right. I will do something like the tests I wrote in testutil.",
      "parentUuid": "6536b211_50269ad2",
      "range": {
        "startLine": 99,
        "startChar": 1,
        "endLine": 99,
        "endChar": 37
      },
      "revId": "436f9bebdb7edfbb8d033225648ddfd5cb80940b",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}