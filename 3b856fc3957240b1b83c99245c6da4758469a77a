{
  "comments": [
    {
      "key": {
        "uuid": "3e872ed3_a1d37e4a",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-06-18T00:44:14Z",
      "side": 1,
      "message": "what are these two? Backoff in what units? comments?",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e872ed3_21d9ae65",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-06-18T00:44:14Z",
      "side": 1,
      "message": "searching err.Error() substrings is bad practice we shouldn\u0027t exemplify",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e872ed3_41de324f",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-06-18T00:44:14Z",
      "side": 1,
      "message": "comment?",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_feddae30",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T01:58:03Z",
      "side": 1,
      "message": "parentheses",
      "range": {
        "startLine": 63,
        "startChar": 46,
        "endLine": 63,
        "endChar": 57
      },
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e872ed3_81099a66",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-06-18T00:44:14Z",
      "side": 1,
      "message": "kinda a lot of position arguments.\n\ndoes the example need to use any flags or args, though?  Could it just hard-code some values?",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_bee736ff",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T01:58:03Z",
      "side": 1,
      "message": "+1 for hard coded.",
      "parentUuid": "3e872ed3_81099a66",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e872ed3_41139296",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-06-18T00:44:14Z",
      "side": 1,
      "message": "seems like a distraction from the thing being demoed.",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e872ed3_a1013e3a",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-06-18T00:44:14Z",
      "side": 1,
      "message": "listCall :\u003d ....\n\n?",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e872ed3_c1fec2a5",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-06-18T00:44:14Z",
      "side": 1,
      "message": "log.Fatal(err)  ?",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e872ed3_8132fa2e",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-06-18T00:44:14Z",
      "side": 1,
      "message": "// bqDataset wraps the ...",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_9e147a91",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 257,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T01:58:03Z",
      "side": 1,
      "message": "A backoff strategy feels like something that is not specific to a particular API, and is a bit of a distraction from the example.  However, it\u0027s also good to be exemplifying good client behaviour.  I feel like these competing aims could be best achieved by providing a backoff type (in googleapi) that users can use without needing to do their own calculations.  Then just use that type from the examples.",
      "range": {
        "startLine": 255,
        "startChar": 3,
        "endLine": 257,
        "endChar": 42
      },
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_1e086a6d",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T01:58:03Z",
      "side": 1,
      "message": "This loop is needlessly complicated.  It terminates only when all jobs have completed, so there is no need to keep moving jobs around in the queue.  It could instead consider each job in turn, polling that job until it is done.  Once it is done it can move onto the next job.  If it\u0027s already done, then great, move onto the next one.  Each time that a job is checked and found to be not-done, the backoff can be increased.  So if a job completes, then the backoff will only be increased if a job further down the list is still not complete.\n\nRegardless of the approach, the total time will be dominated by the slowest job, but my proposal is simpler.  Because the existing code removes jobs from the list and then conditionally adds them back, it\u0027s hard to verify that jobs don\u0027t get dropped.",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 21
      },
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_3e1326a7",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 286,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T01:58:03Z",
      "side": 1,
      "message": "rather than getting the whole job here, this should just be checking its status i.e. whether it\u0027s done or not.  There\u0027s no point fetching the job statistics until the job is done.\n\nTo fetch just the status from the underlying api requires doing:\n\nJobs.Get(ds.project, id).Fields(\"status\").Do()",
      "range": {
        "startLine": 286,
        "startChar": 15,
        "endLine": 286,
        "endChar": 26
      },
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e872ed3_612d76cd",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 352,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-06-18T00:44:14Z",
      "side": 1,
      "message": "// jobStats is ...",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e872ed3_412cf2ce",
        "filename": "bigquery/v2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 369,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-06-18T00:44:14Z",
      "side": 1,
      "message": "why is it a GoString? Why not just String() string so it\u0027s a Stringer?",
      "revId": "3b856fc3957240b1b83c99245c6da4758469a77a",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}