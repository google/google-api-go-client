{
  "comments": [
    {
      "key": {
        "uuid": "449df96e_11b60c78",
        "filename": "google-api-go-generator/storage_test.go",
        "patchSetId": 17
      },
      "lineNbr": 189,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-18T06:42:36Z",
      "side": 1,
      "message": "I think it would specifying the sequence of events that happen here: the initial upload terminates after receiving \"received\" bytes.  The subsequent request completes the upload.",
      "range": {
        "startLine": 189,
        "startChar": 58,
        "endLine": 189,
        "endChar": 96
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_066cfa25",
        "filename": "google-api-go-generator/storage_test.go",
        "patchSetId": 17
      },
      "lineNbr": 189,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-18T23:39:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "449df96e_11b60c78",
      "range": {
        "startLine": 189,
        "startChar": 58,
        "endLine": 189,
        "endChar": 96
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_f157c89e",
        "filename": "google-api-go-generator/storage_test.go",
        "patchSetId": 17
      },
      "lineNbr": 190,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-18T06:42:36Z",
      "side": 1,
      "message": "please document this.",
      "range": {
        "startLine": 190,
        "startChar": 44,
        "endLine": 190,
        "endChar": 52
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_66616e2e",
        "filename": "google-api-go-generator/storage_test.go",
        "patchSetId": 17
      },
      "lineNbr": 190,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-18T23:39:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "449df96e_f157c89e",
      "range": {
        "startLine": 190,
        "startChar": 44,
        "endLine": 190,
        "endChar": 52
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_31bb105f",
        "filename": "google-api-go-generator/storage_test.go",
        "patchSetId": 17
      },
      "lineNbr": 271,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-18T06:42:36Z",
      "side": 1,
      "message": "what is the benefit to using handler.r instead of handler.reqs[3] ?",
      "range": {
        "startLine": 271,
        "startChar": 32,
        "endLine": 271,
        "endChar": 55
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_a65a4678",
        "filename": "google-api-go-generator/storage_test.go",
        "patchSetId": 17
      },
      "lineNbr": 271,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-18T23:39:05Z",
      "side": 1,
      "message": "changed to handler.reqs[3]",
      "parentUuid": "449df96e_31bb105f",
      "range": {
        "startLine": 271,
        "startChar": 32,
        "endLine": 271,
        "endChar": 55
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64303d13_4254122b",
        "filename": "googleapi/chunker.go",
        "patchSetId": 17
      },
      "lineNbr": 78,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-14T07:00:35Z",
      "side": 1,
      "message": "This no longer happens, right?",
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_26cad648",
        "filename": "googleapi/chunker.go",
        "patchSetId": 17
      },
      "lineNbr": 78,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-14T21:41:54Z",
      "side": 1,
      "message": "Right. Will remove.",
      "parentUuid": "64303d13_4254122b",
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_c6c4a238",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 51,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-14T21:41:54Z",
      "side": 1,
      "message": "The original resumable upload implementation had mediaType as a mandatory parameter, so I\u0027ve kept it at first and then converted it to an UploadOption. But perhaps we should reconsider this.\n\nPresently Media and ResumableMedia use two different mechanisms for overriding automatic content type detection:\n- Media checks whether Reader implements googleapi.ContentTyper interface\n- ResumableMedia looks for UploadOption\n\nNote also that user may attempt to specify contentType as object resource/metadata: https://cloud.google.com/storage/docs/json_api/v1/objects/insert\nCurrent implementation of both regular and resumable upload will send this as JSON payload, but will effectively override it with auto-guessed value through HTTP headers.\n\nI suggest we remove both ContentTyper interface and SetMediaType UploadOption, and instead use contentType field in object resource if present, falling back to http.DetectContentType.\n\nOne caveat with this proposal is that I am only familiar with cloud storage API; I am not sure if other APIs that support upload also support contentType object resource field.",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 17
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_b1646015",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 51,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-17T10:19:41Z",
      "side": 1,
      "message": "We can\u0027t assume that there is a contentType field in the object resource.  The Drive API, for example has no such field in its \"File\" resource: http://godoc.org/google.golang.org/api/drive/v2#File\n\nIn general, I think that the client library code should not care about the contents of the resources that it is dealing with.\n\nGiven that we can\u0027t rely on a resource contentType field, I don\u0027t think falling back to http.DetectContentType is enough: users need a way to explicitly specify the content type.\n\nI think it would be desirable to have consistency between Media and ResumableMedia.  My preference is to standardize on the approach we\u0027ve adopted for ResumableMedia in this change, so have Media take a variable number of UploadOptions.  If the user passes a setMediaType option into Media, it can override any ContentType method that the reader may have.  The use of ContentTyper doesn\u0027t seem to be documented, so I don\u0027t think this should be too confusing.  This way we don\u0027t break existing users of Media, but make ResumableMedia and Media consistent with each other.\n\nAlso, I think it\u0027s better to have a single exported UploadOption interface for both Media and ResumableMedia, rather than splitting it into MediaUploadOption and ResumableMediaUploadOption.  It makes it potentially easier to write common code, plus naming of the options is more straightforward.\n\nIf a user passes an UploadOption that is not relevant (such as a setChunkSize for Media), it could be ignored. Under the hood, this would mean that you would want two unexported interfaces, mediaUploadOption, with a method for populating a Media-specific option struct, and resumableMediaUploadOption, with a method for populating a ResumableMedia-specific option struct.",
      "parentUuid": "e41a6db3_c6c4a238",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 17
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_a6a9a615",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 51,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-17T18:52:15Z",
      "side": 1,
      "message": "OK, I\u0027ll add ...UploadOption to Media(). I think I\u0027ll keep single unexported interface under the hood, and single struct holding union of options applying to Media and ResumableMedia. The relevant functions specific to Media/ResumableMedia will then use only those fields from the struct that are applicable to that upload type.",
      "parentUuid": "449df96e_b1646015",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 17
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_314070ef",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 51,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-18T06:42:36Z",
      "side": 1,
      "message": "That sounds fine.",
      "parentUuid": "e41a6db3_a6a9a615",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 17
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_06bb5a5e",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 402,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-17T18:52:15Z",
      "side": 1,
      "message": "This is wrong. An error from ChunkAt() (which would typically be an underlying reader error) would be swallowed, returning an \"application/octet-stream\" and relying on future invocations of ChunktAt to return the same error. But that\u0027s not guaranteed, since the underlying reader is not guaranteed to return the same error in the future.\n\nI think I\u0027ll modify Configure() to return an error, and modify the calling code to terminate upload on error.\n\nIt\u0027s worth noting that regular Media upload also needs to deal with the same issue, yet they chose very different approach. See getMediaType(): instead of propagating error as return value from the func, getMediaType is setting up an io.Pipe and a go routine to copy content from io.MultiReader to the pipe, all for the purpose of propagating the reader error out of io.Pipe. Why go through all that trouble when the end result will be failed upload? Why not just return error from getMediaType and terminate the upload in the caller using the returned error?",
      "range": {
        "startLine": 402,
        "startChar": 2,
        "endLine": 402,
        "endChar": 68
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_f125085f",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 402,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-18T06:42:36Z",
      "side": 1,
      "message": "Your suggestion sounds reasonable (to return an error from Configure and terminate upload on error).\n\nI agree that the getMediaType approach to dealing with a failed attempt to detect the content type is a fairly round-about way of signalling the error.\n\nI suppose that it unifies the error handling by treating it in the same way as later read errors when copying the data from the underlying reader into the Pipe.  However, I agree that it would be better to simply return an error from that function and have the caller handle it immediately, rather than relying on the read error being detected later.\n\nThe use of a Pipe (and the goroutine to feed it) also seems unnecessary; in the normal case getMediaType should just be able to return the MultiReader. The goroutine doesn\u0027t seem to add anything.",
      "parentUuid": "e41a6db3_06bb5a5e",
      "range": {
        "startLine": 402,
        "startChar": 2,
        "endLine": 402,
        "endChar": 68
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_29b0e929",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 402,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-18T23:39:05Z",
      "side": 1,
      "message": "Regarding Pipe and goroutine: they were introduced in 8e023449, perhaps Glenn could comment on that. I suspect the reason was to ensure that any error encountered while reading the first 512 bytes is propagated out.\n\nConsider a hypothetical reader which returns an error other than io.EOF, but on subsequent Read calls returns an EOF. Simply returning io.MultiReader would cause the error to be masked. Of course one could argue that such Reader is buggy, but io.Reader spec does not state anything definitive about reader behavior after the first error.\n\nRegarding unification of error handling: if there was a tangible benefit to allowing the upload to start and then letting the error show up from the reader during HTTP POST request, I could modify the bufferedChunker to have reader error propagated out of returned chunk reader, as opposed to returning the error directly from ChunkAt() call. Right now I don\u0027t see that benefit and I don\u0027t want to complicate the chunker code needlessly, but I wanted to bring this up in case I am missing something.",
      "parentUuid": "449df96e_f125085f",
      "range": {
        "startLine": 402,
        "startChar": 2,
        "endLine": 402,
        "endChar": 68
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_d1f00407",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 402,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-19T01:54:38Z",
      "side": 1,
      "message": "It the hypothetical reader returned an error other than io.EOF, it could be returned from getMediaType as an error (assuming that getMediaType were modified to add an error return value).  ConditionallyIncludeMedia could then return early \n\npr, pw :\u003d io.Pipe()\n*bodyp \u003d pr\npw.CloseWithError(fmt.Errorf(\"googleapi: body Copy failed: %v\", errFromGetMediaType))\n\nIn this case, there would be no subsequent Read calls and no errors would be masked.\n\nLet me know if I am misunderstanding you.\n\nRe: your last point: I can\u0027t see any benefit to plumbing the error via the reader.",
      "parentUuid": "e41a6db3_29b0e929",
      "range": {
        "startLine": 402,
        "startChar": 2,
        "endLine": 402,
        "endChar": 68
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_f19fc8ad",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 402,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-19T01:55:45Z",
      "side": 1,
      "message": "Edit to my comment:\n\ns/could then return early/could then return early after doing:/",
      "parentUuid": "449df96e_d1f00407",
      "range": {
        "startLine": 402,
        "startChar": 2,
        "endLine": 402,
        "endChar": 68
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_09ab6d90",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 402,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-19T03:43:22Z",
      "side": 1,
      "message": "I think we are on the same page with regard to getMediaType being modified to return an error value. I was just trying to explain that *in the absence* of error return type from getMediaType, the Pipe/goroutine do seem to serve the purpose of ensuring that error return from Reader does not get lost.",
      "parentUuid": "449df96e_f19fc8ad",
      "range": {
        "startLine": 402,
        "startChar": 2,
        "endLine": 402,
        "endChar": 68
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_66edeeb1",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 472,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-14T21:41:54Z",
      "side": 1,
      "message": "Note that this means that transient connection issues will cause the resumable upload to be aborted. In fact, the only scenario where resumable upload is actually resumed is if cloud storage server returns http code other than 308 and 200, which typically means 5xx.\n\nA more complete approach would be to try to distinguish between potentially transient errors (e.g. connectivity) and permanent errors (e.g. reader error) and implement a retry schema with an exponential backoff.\n\nThese are issues inherited from the initial implementation and are not in any way related to the added support for readers of unknown size, so I am not suggesting fixing them as part of this change set. I just thought this would be a good time to bring this up to everyone\u0027s attention.",
      "range": {
        "startLine": 472,
        "startChar": 3,
        "endLine": 472,
        "endChar": 18
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_d14ac479",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 472,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-17T10:19:41Z",
      "side": 1,
      "message": "Thanks for pointing that out.  I agree that it would be good to make this more robust and that it should not be part of this change.  Can you file an issue to track this?",
      "parentUuid": "e41a6db3_66edeeb1",
      "range": {
        "startLine": 472,
        "startChar": 3,
        "endLine": 472,
        "endChar": 18
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_461712d5",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 472,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-17T18:52:15Z",
      "side": 1,
      "message": "Looks like Glenn keeps an issue open for resumable upload support, so I\u0027ve added a comment there instead of creating yet another issue:\nhttps://github.com/google/google-api-go-client/issues/17",
      "parentUuid": "449df96e_d14ac479",
      "range": {
        "startLine": 472,
        "startChar": 3,
        "endLine": 472,
        "endChar": 18
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_7173d85c",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 478,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-18T06:42:36Z",
      "side": 1,
      "message": "there\u0027s no need to increment start (line 475) if you\u0027re returning from this function, since start is a local variable.\n\nSo move this if block above line 474.  Then we can see that if we make it past this return statement, the res.StatusCode must be statusResumeIncomplete, which means that \"if res.StatusCode \u003d\u003d statusResumeIncomplete || res.StatusCode \u003d\u003d http.StatusOK\" is always true.  So start can be unconditionally incremented.",
      "range": {
        "startLine": 478,
        "startChar": 3,
        "endLine": 478,
        "endChar": 18
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_09b52d1a",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 17
      },
      "lineNbr": 478,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-18T23:39:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "449df96e_7173d85c",
      "range": {
        "startLine": 478,
        "startChar": 3,
        "endLine": 478,
        "endChar": 18
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_d181e49f",
        "filename": "googleapi/googleapi_test.go",
        "patchSetId": 17
      },
      "lineNbr": 602,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-18T06:42:36Z",
      "side": 1,
      "message": "delete blank line",
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_49bf25f8",
        "filename": "googleapi/googleapi_test.go",
        "patchSetId": 17
      },
      "lineNbr": 602,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-18T23:39:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "449df96e_d181e49f",
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_714cb819",
        "filename": "googleapi/googleapi_test.go",
        "patchSetId": 17
      },
      "lineNbr": 611,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-18T06:42:36Z",
      "side": 1,
      "message": "this isn\u0027t being used.",
      "range": {
        "startLine": 611,
        "startChar": 11,
        "endLine": 611,
        "endChar": 31
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_a9c33980",
        "filename": "googleapi/googleapi_test.go",
        "patchSetId": 17
      },
      "lineNbr": 611,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-18T23:39:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "449df96e_714cb819",
      "range": {
        "startLine": 611,
        "startChar": 11,
        "endLine": 611,
        "endChar": 31
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_114d2c18",
        "filename": "googleapi/googleapi_test.go",
        "patchSetId": 17
      },
      "lineNbr": 617,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-18T06:42:36Z",
      "side": 1,
      "message": "I think that the introduction of the w and v variables obscure what\u0027s going on here.  I think you\u0027d be better off using mediaType and rx.mediaType directly.",
      "range": {
        "startLine": 617,
        "startChar": 5,
        "endLine": 617,
        "endChar": 44
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_e9cd31ab",
        "filename": "googleapi/googleapi_test.go",
        "patchSetId": 17
      },
      "lineNbr": 617,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-18T23:39:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "449df96e_114d2c18",
      "range": {
        "startLine": 617,
        "startChar": 5,
        "endLine": 617,
        "endChar": 44
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "449df96e_91603c7a",
        "filename": "googleapi/googleapi_test.go",
        "patchSetId": 17
      },
      "lineNbr": 635,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-08-18T06:42:36Z",
      "side": 1,
      "message": "this is testing too many things at once.  Please test SetMediatType separately form isBuffered.",
      "range": {
        "startLine": 634,
        "startChar": 1,
        "endLine": 635,
        "endChar": 80
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e41a6db3_c9caf590",
        "filename": "googleapi/googleapi_test.go",
        "patchSetId": 17
      },
      "lineNbr": 635,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-08-18T23:39:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "449df96e_91603c7a",
      "range": {
        "startLine": 634,
        "startChar": 1,
        "endLine": 635,
        "endChar": 80
      },
      "revId": "3d02b69e1297c23ee83c3eed11b897b2fb871d42",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}