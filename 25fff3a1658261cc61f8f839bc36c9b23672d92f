{
  "comments": [
    {
      "key": {
        "uuid": "be731e93_0992d9aa",
        "filename": "admin/directory_v1/admin-gen.go",
        "patchSetId": 1
      },
      "lineNbr": 1355,
      "author": {
        "id": 5915
      },
      "writtenOn": "2015-06-26T17:31:10Z",
      "side": 1,
      "message": "Mocking at a little bit of a higher level might be more straightforward.\n\nThis would need interfaces for the Service and the Call types.  Users can Autogenerate fake Call implementations, but that\u0027s just glue for testing with the fake Service implementations.\n\nHere\u0027s an example, excuse my syntax.\n\nThe interface we want to mock against:\n\ntype AspsServiceInterface interface {\n  Delete(userKey string, codeId int64) *AspsDeleteCall\n  Create(....) ...\n}\n\nThen assume I have code:\n\ntype DataManager struct {\n asps *AspsServiceInterface\n data *MyDataType\n userKey string\n}\n\nfunc (m *DataManager) deleteAllTheThings() {\n  for val :\u003d m.data.ids {\n    m.asps.Delete(m.userKey, val).Do();\n  }\n}\n\n\nAnd I can write a test:\n\ntype MockAsps struct {\n  ids int64[]\n}\n\nfunc (mock *MockAsps) Delete(userKey string, codeId int64) *AspsDeleteCall {\n mock.ids.append(codeId)\n assert(userKey \u003d\u003d fakeUserKey)\n return new DummyDeleteCall\n}\n\nfunc testDeleteAllTheThings() {\n  mockAsps :\u003d new MockAsps\n  manager :\u003d new DataManager{ asps: mockAsps, data: fakeData, userKey: fakeUserKey}\n  manager.deleteAllTheThings()\n  assert(mockAsps.ids \u003d\u003d expectedIds)\n}",
      "range": {
        "startLine": 1349,
        "startChar": 0,
        "endLine": 1355,
        "endChar": 1
      },
      "revId": "25fff3a1658261cc61f8f839bc36c9b23672d92f",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}