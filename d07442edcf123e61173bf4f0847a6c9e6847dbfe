{
  "comments": [
    {
      "key": {
        "uuid": "15e6d4af_4a1f4e19",
        "filename": "support/bundler/bundler.go",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 9287
      },
      "writtenOn": "2017-03-16T21:00:49Z",
      "side": 1,
      "message": "I think this check needs to go in (or after) the loop: a blocked AddWait should return ErrStopped if Stop is called but ctx is not done.\n\nOr perhaps move the sends on b.spacec into the Mutex-guarded section and close b.spacec when Stop is called.",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 205,
        "endChar": 2
      },
      "revId": "d07442edcf123e61173bf4f0847a6c9e6847dbfe",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70e45b16_a681b0bb",
        "filename": "support/bundler/bundler.go",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 9287
      },
      "writtenOn": "2017-03-16T21:00:49Z",
      "side": 1,
      "message": "The other interesting direction you could go would be to eliminate the Stop method entirely.\n\n(That would also accomplish the goal of eliminating the redundancy between Stop and the other synchronization in pubsub, but by removing the other side.)\n\nIt looks like the major thing you\u0027re using the background goroutine for is flushing after DelayThreshold, but you can do that using just b.timer and time.AfterFunc.\n\nI was going to sketch that approach here, but it turned into a CL:\nhttps://code-review.googlesource.com/#/c/11512/",
      "range": {
        "startLine": 254,
        "startChar": 0,
        "endLine": 254,
        "endChar": 15
      },
      "revId": "d07442edcf123e61173bf4f0847a6c9e6847dbfe",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}