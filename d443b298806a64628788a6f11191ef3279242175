{
  "comments": [
    {
      "key": {
        "uuid": "244c8613_cf68adbe",
        "filename": "adexchangebuyer/v1.2/adexchangebuyer-gen.go",
        "patchSetId": 5
      },
      "lineNbr": 141,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-09-10T01:33:22Z",
      "side": 1,
      "message": "considering this will uncommonly be used, we should probably create this map only if ForceSendFields is non-empty.  Or just pass the list to SchemaToMap, and not do it here?\n\nWill review more later. Just have a second here.",
      "revId": "d443b298806a64628788a6f11191ef3279242175",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a467969e_47748ec7",
        "filename": "adexchangebuyer/v1.2/adexchangebuyer-gen.go",
        "patchSetId": 5
      },
      "lineNbr": 141,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-09-10T03:34:01Z",
      "side": 1,
      "message": "The two options you suggest seem to optimize for different things:\n\noption 1: Only create the map when ForceSendFields is non-empty.\nThis seems to be intended to reduce the cost of calling MarshalJSON by removing unnecessary map instantiations. I would have thought that these instantiations would be in the noise compared with the execution cost of (a) SchemaToMap, and (b) the RPC for which these schemas are being marshaled in the first place.\n\noption 2: Pass ForceSendFields directly to SchemaToMap.\nThis would reduce the code size of MarshalJSON, which is duplicated for every schema struct.  Although I think it\u0027s nicer for SchemaToMap to take a map rather than a list, I can see that this might be worth doing to reduce the overall code size.\n\nHave I correctly understood the intent behind your suggestions? Can you clarify whether your main concern is optimizing for execution time or code size?",
      "parentUuid": "244c8613_cf68adbe",
      "revId": "d443b298806a64628788a6f11191ef3279242175",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}