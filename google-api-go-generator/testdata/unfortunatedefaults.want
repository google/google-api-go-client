// Package wrapnewlines provides access to the Example API.
//
// Usage example:
//
//   import "google.golang.org/api/wrapnewlines/v1"
//   ...
//   wrapnewlinesService, err := wrapnewlines.New(oauthHttpClient)
package wrapnewlines

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"golang.org/x/net/context"
	"google.golang.org/api/googleapi"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// Always reference these packages, just in case the auto-generated code
// below doesn't.
var _ = bytes.NewBuffer
var _ = strconv.Itoa
var _ = fmt.Sprintf
var _ = json.NewDecoder
var _ = io.Copy
var _ = url.Parse
var _ = googleapi.Version
var _ = errors.New
var _ = strings.Replace
var _ = context.Background

const apiId = "wrapnewlines:v1"
const apiName = "wrapnewlines"
const apiVersion = "v1"
const basePath = "https://www.googleapis.com/discovery/v1/apis"

func New(client *http.Client) (*Service, error) {
	if client == nil {
		return nil, errors.New("client is nil")
	}
	s := &Service{client: client, BasePath: basePath}
	return s, nil
}

type Service struct {
	client    *http.Client
	BasePath  string // API endpoint base URL
	UserAgent string // optional additional User-Agent fragment
}

func (s *Service) userAgent() string {
	if s.UserAgent == "" {
		return googleapi.UserAgent
	}
	return googleapi.UserAgent + " " + s.UserAgent
}

type Thing struct {
	// Bool_empty_default_a:
	// Nonempty default: no
	// Unfortunate default: no
	Bool_empty_default_a bool `json:"bool_empty_default_a,omitempty"`

	// Bool_empty_default_b:
	// Nonempty default: no
	// Unfortunate default: no
	Bool_empty_default_b bool `json:"bool_empty_default_b,omitempty"`

	// Bool_nonempty_default:
	// Nonempty default: yes
	// Unfortunate default: yes
	// Default: true
	Bool_nonempty_default *bool `json:"bool_nonempty_default,omitempty"`

	// Numeric_empty_default_a:
	// Nonempty default: no
	// Unfortunate default: no
	Numeric_empty_default_a int64 `json:"numeric_empty_default_a,omitempty,string"`

	// Numeric_empty_default_b:
	// Nonempty default: no
	// Unfortunate default: no
	Numeric_empty_default_b int64 `json:"numeric_empty_default_b,omitempty,string"`

	// Numeric_empty_default_c:
	// Nonempty default: no
	// Unfortunate default: no
	Numeric_empty_default_c int64 `json:"numeric_empty_default_c,omitempty,string"`

	// Numeric_nonempty_default:
	// Nonempty default: yes
	// Unfortunate default: yes
	// Default: 1
	Numeric_nonempty_default *int64 `json:"numeric_nonempty_default,omitempty,string"`

	// String_empty_default_doesnt_accept_empty:
	// Nonempty default: no
	// Accepts empty value: no
	// Unfortunate default: no
	String_empty_default_doesnt_accept_empty string `json:"string_empty_default_doesnt_accept_empty,omitempty"`

	// String_empty_default_enum_accepts_empty:
	// Nonempty default: no
	// Accepts empty value: yes (enum)
	// Unfortunate default: no
	String_empty_default_enum_accepts_empty string `json:"string_empty_default_enum_accepts_empty,omitempty"`

	// String_empty_default_enum_doesnt_accept_empty:
	// Nonempty default: no
	// Accepts empty value: no (enum)
	// Unfortunate default: no
	String_empty_default_enum_doesnt_accept_empty string `json:"string_empty_default_enum_doesnt_accept_empty,omitempty"`

	// String_empty_default_pattern_accepts_empty:
	// Nonempty default: no
	// Accepts empty value: yes (pattern)
	// Unfortunate default: no
	String_empty_default_pattern_accepts_empty string `json:"string_empty_default_pattern_accepts_empty,omitempty"`

	// String_empty_default_pattern_doesnt_accept_empty:
	// Nonempty default: no
	// Accepts empty value: no (pattern)
	// Unfortunate default: no
	String_empty_default_pattern_doesnt_accept_empty string `json:"string_empty_default_pattern_doesnt_accept_empty,omitempty"`

	// String_nonempty_default_doesnt_accept_empty:
	// Nonempty default: yes
	// Accepts empty value: no
	// Unfortunate default: no
	String_nonempty_default_doesnt_accept_empty string `json:"string_nonempty_default_doesnt_accept_empty,omitempty"`

	// String_nonempty_default_enum_accepts_empty:
	// Nonempty default: yes
	// Accepts empty value: yes (enum)
	// Unfortunate default: yes
	// Default: nonempty
	String_nonempty_default_enum_accepts_empty *string `json:"string_nonempty_default_enum_accepts_empty,omitempty"`

	// String_nonempty_default_enum_doesnt_accept_empty:
	// Nonempty default: yes
	// Accepts empty value: no (enum)
	// Unfortunate default: no
	String_nonempty_default_enum_doesnt_accept_empty string `json:"string_nonempty_default_enum_doesnt_accept_empty,omitempty"`

	// String_nonempty_default_pattern_accepts_empty:
	// Nonempty default: yes
	// Accepts empty value: yes (pattern)
	// Unfortunate default: yes
	// Default: nonempty
	String_nonempty_default_pattern_accepts_empty *string `json:"string_nonempty_default_pattern_accepts_empty,omitempty"`

	// String_nonempty_default_pattern_doesnt_accept_empty:
	// Nonempty default: yes
	// Accepts empty value: no (pattern)
	// Unfortunate default: no
	String_nonempty_default_pattern_doesnt_accept_empty string `json:"string_nonempty_default_pattern_doesnt_accept_empty,omitempty"`
}
