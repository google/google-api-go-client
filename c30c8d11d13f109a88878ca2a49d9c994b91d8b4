{
  "comments": [
    {
      "key": {
        "uuid": "161fca56_1e12aa70",
        "filename": ".travis.yml",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "This includes integration tests, but does not exclude other tests.  So this will re-run other tests.\n\nYou could instead remove line 16 and make this \n\ngo test -v -tags\u003dintegration google.golang.org/api/...",
      "range": {
        "startLine": 18,
        "startChar": 15,
        "endLine": 18,
        "endChar": 32
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_de0b1238",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "Can you make this use the new style? should be something like:\n\n  o :\u003d []cloud.ClientOption{\n    cloud.WithScopes(storage.DevstorageFullControlScope),\n  }\n  httpClient, _, err :\u003d transport.NewHTTPClient(context.Background(), o...)\n  if err !\u003d nil {\n    t.Fatalf(\"dialing: %v\", err)\n  }\n  s, err :\u003d storage.New(httpClient)\n\n\nsee here for an example:\nhttps://github.com/GoogleCloudPlatform/gcloud-golang/blob/master/logging/logging.go#L437",
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_3eb446a8",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "\"call \u003d\" is not necessary.",
      "range": {
        "startLine": 83,
        "startChar": 3,
        "endLine": 83,
        "endChar": 10
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_1e998a3c",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "The test will fail if err !\u003d nil, but if it returns an empty response, nothing will catch this.  Instead of logging here, you may as well make this a check that the number of bucket is as expected, and fail if it\u0027s not.",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 94,
        "endChar": 65
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_fe95aeff",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "I don\u0027t think it helps to have random contents.  If this test ever fails because of a corner case in the contents, we\u0027re not going to notice it; we\u0027ll just think it\u0027s a flaky test.\n\nUnless you can see any other benefit to random contents, I think it would be preferable to make this repeatable by using deterministic contents.",
      "range": {
        "startLine": 105,
        "startChar": 7,
        "endLine": 105,
        "endChar": 23
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_dea2f267",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "defer resp.Body.Close() here?",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 120,
        "endChar": 2
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_febc8e89",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "why not just store str in the checksumCase in the first place?",
      "range": {
        "startLine": 215,
        "startChar": 2,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_beb616a4",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "I think this should go directly after line 236.",
      "range": {
        "startLine": 245,
        "startChar": 2,
        "endLine": 247,
        "endChar": 3
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_7eaabe47",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "I\u0027d defer this right after the call to cleanup above.",
      "range": {
        "startLine": 253,
        "startChar": 0,
        "endLine": 256,
        "endChar": 27
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_5eaf0256",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "Rather than pass in a prefix here, why not just delete the entire contents of the bucket each time?  Then you can reduce four calls to cleanup to just a single \"cleanup(t, s)\", and you will know that you are not leaving anything lying around should you add more files to the test later on.",
      "range": {
        "startLine": 259,
        "startChar": 45,
        "endLine": 259,
        "endChar": 60
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_be08563c",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "delete.",
      "range": {
        "startLine": 264,
        "startChar": 3,
        "endLine": 264,
        "endChar": 10
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}