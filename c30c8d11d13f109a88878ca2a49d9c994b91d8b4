{
  "comments": [
    {
      "key": {
        "uuid": "161fca56_1e12aa70",
        "filename": ".travis.yml",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "This includes integration tests, but does not exclude other tests.  So this will re-run other tests.\n\nYou could instead remove line 16 and make this \n\ngo test -v -tags\u003dintegration google.golang.org/api/...",
      "range": {
        "startLine": 18,
        "startChar": 15,
        "endLine": 18,
        "endChar": 32
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_4d7d50ff",
        "filename": ".travis.yml",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "161fca56_1e12aa70",
      "range": {
        "startLine": 18,
        "startChar": 15,
        "endLine": 18,
        "endChar": 32
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_de0b1238",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "Can you make this use the new style? should be something like:\n\n  o :\u003d []cloud.ClientOption{\n    cloud.WithScopes(storage.DevstorageFullControlScope),\n  }\n  httpClient, _, err :\u003d transport.NewHTTPClient(context.Background(), o...)\n  if err !\u003d nil {\n    t.Fatalf(\"dialing: %v\", err)\n  }\n  s, err :\u003d storage.New(httpClient)\n\n\nsee here for an example:\nhttps://github.com/GoogleCloudPlatform/gcloud-golang/blob/master/logging/logging.go#L437",
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_8845669a",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "All the examples I could find using the new style import:\n\t\"google.golang.org/cloud/internal/transport\"\nwhich causes the error:\n\timports google.golang.org/cloud/internal/transport: use of internal package not allowed\n\nso if I try to build my own transport, this comes to mind:\nhttps://github.com/GoogleCloudPlatform/gcloud-golang/blob/master/examples/storage/appenginevm/app.go#L74-L79\n\nbut that defeats the purpose of providing the scope in one place.\n\nAre there any external examples of using the new style?",
      "parentUuid": "161fca56_de0b1238",
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6851e5b_910ddc82",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-09T04:57:45Z",
      "side": 1,
      "message": "Sorry, forget about this. It looks like NewHTTPClient was only ever intended to be used from the cloud/ packages.  What you have is fine.",
      "parentUuid": "f6923665_8845669a",
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_3eb446a8",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "\"call \u003d\" is not necessary.",
      "range": {
        "startLine": 83,
        "startChar": 3,
        "endLine": 83,
        "endChar": 10
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_c84e8ebb",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "161fca56_3eb446a8",
      "range": {
        "startLine": 83,
        "startChar": 3,
        "endLine": 83,
        "endChar": 10
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_1e998a3c",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "The test will fail if err !\u003d nil, but if it returns an empty response, nothing will catch this.  Instead of logging here, you may as well make this a check that the number of bucket is as expected, and fail if it\u0027s not.",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 94,
        "endChar": 65
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_a82142e0",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "The problem with that is that this GCP project that we are using for testing may change its number of buckets over time, and we should not fail because of that. The point here was to simply call s.Buckets.List to make sure that the API is not broken... but I can add an error if the # of buckets is not at least 1.",
      "parentUuid": "161fca56_1e998a3c",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 94,
        "endChar": 65
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6851e5b_b1c4a063",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-09T04:57:45Z",
      "side": 1,
      "message": "Yes, that would be fine.",
      "parentUuid": "f6923665_a82142e0",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 94,
        "endChar": 65
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_fe95aeff",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "I don\u0027t think it helps to have random contents.  If this test ever fails because of a corner case in the contents, we\u0027re not going to notice it; we\u0027ll just think it\u0027s a flaky test.\n\nUnless you can see any other benefit to random contents, I think it would be preferable to make this repeatable by using deterministic contents.",
      "range": {
        "startLine": 105,
        "startChar": 7,
        "endLine": 105,
        "endChar": 23
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_a8e6a2d5",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "I\u0027m not sure why you say \"we\u0027re not going to notice it\"... because we will see a test breakage and should investigate...\nbut the only other benefit I can see is if the backend delivered the wrong file to us, but hopefully they have tests against that, so I\u0027ve made the contents static.",
      "parentUuid": "161fca56_fe95aeff",
      "range": {
        "startLine": 105,
        "startChar": 7,
        "endLine": 105,
        "endChar": 23
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6851e5b_51da1443",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-09T04:57:45Z",
      "side": 1,
      "message": "I meant that if the test were failing purely due to a particular value returned from randomContents, then it would pass again on the next run.  It seems likely to me that a single failure among a run of successes would be written off as \"probably an intermittent failure (e.g. network issue)\" and not investigated. Perhaps you are more diligent than me, however :).",
      "parentUuid": "f6923665_a8e6a2d5",
      "range": {
        "startLine": 105,
        "startChar": 7,
        "endLine": 105,
        "endChar": 23
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_dea2f267",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "defer resp.Body.Close() here?",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 120,
        "endChar": 2
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_4870dee7",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "I don\u0027t think so because this is inside a \u0027for\u0027 loop.\nSee line 124 below.",
      "parentUuid": "161fca56_dea2f267",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 120,
        "endChar": 2
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_febc8e89",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "why not just store str in the checksumCase in the first place?",
      "range": {
        "startLine": 215,
        "startChar": 2,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_28a0f25d",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "161fca56_febc8e89",
      "range": {
        "startLine": 215,
        "startChar": 2,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_beb616a4",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "I think this should go directly after line 236.",
      "range": {
        "startLine": 245,
        "startChar": 2,
        "endLine": 247,
        "endChar": 3
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_88af2655",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "161fca56_beb616a4",
      "range": {
        "startLine": 245,
        "startChar": 2,
        "endLine": 247,
        "endChar": 3
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_7eaabe47",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "I\u0027d defer this right after the call to cleanup above.",
      "range": {
        "startLine": 253,
        "startChar": 0,
        "endLine": 256,
        "endChar": 27
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_2809d23f",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "161fca56_7eaabe47",
      "range": {
        "startLine": 253,
        "startChar": 0,
        "endLine": 256,
        "endChar": 27
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_5eaf0256",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "Rather than pass in a prefix here, why not just delete the entire contents of the bucket each time?  Then you can reduce four calls to cleanup to just a single \"cleanup(t, s)\", and you will know that you are not leaving anything lying around should you add more files to the test later on.",
      "range": {
        "startLine": 259,
        "startChar": 45,
        "endLine": 259,
        "endChar": 60
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_c8112e6d",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "Two reasons:\n1) I thought that was dangerous in case the wrong bucket got used,\n2) other integration tests could use this bucket for any storage needed during testing\nbut if you think these aren\u0027t good enough reasons, I could do that.",
      "parentUuid": "161fca56_5eaf0256",
      "range": {
        "startLine": 259,
        "startChar": 45,
        "endLine": 259,
        "endChar": 60
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6851e5b_11d48c10",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-09T04:57:45Z",
      "side": 1,
      "message": "(1) This project is only used for testing, right?  So the only danger is that other tests are caused to fail somehow.  Doesn\u0027t seem like a big risk to me.\n(2) Buckets are cheap.  I think we should create as many of them as we like if it makes the tests simpler. In any case, if other tests were to use the same bucket, they\u0027d still need to take care not to use conflicting filenames. They may as well just take care not to use the same bucket.\n\nIf you\u0027re worried about the bucket being inadvertently reused in another test, you can give the bucket a very specific name (e.g. \"google-api-go-generator-integration-storage\"). BTW, since bucket names are globally unique, there\u0027s no chance of accidentally overwriting the contents of an identically named bucket in another project.  So I don\u0027t think there\u0027s any need for the bucket name to be configurable via an environment variable.",
      "parentUuid": "f6923665_c8112e6d",
      "range": {
        "startLine": 259,
        "startChar": 45,
        "endLine": 259,
        "endChar": 60
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "161fca56_be08563c",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-11-02T05:40:34Z",
      "side": 1,
      "message": "delete.",
      "range": {
        "startLine": 264,
        "startChar": 3,
        "endLine": 264,
        "endChar": 10
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6923665_28f2b291",
        "filename": "integration-tests/storage/integration_test.go",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 5155
      },
      "writtenOn": "2015-11-06T20:17:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "161fca56_be08563c",
      "range": {
        "startLine": 264,
        "startChar": 3,
        "endLine": 264,
        "endChar": 10
      },
      "revId": "c30c8d11d13f109a88878ca2a49d9c994b91d8b4",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}