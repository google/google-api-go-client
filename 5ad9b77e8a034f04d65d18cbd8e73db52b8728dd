{
  "comments": [
    {
      "key": {
        "uuid": "adb5b6f9_3c5cd1c5",
        "filename": "gmail/v1/gmail-gen.go",
        "patchSetId": 10
      },
      "lineNbr": 781,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-07-27T03:35:34Z",
      "side": 1,
      "message": "This is too verbose (\"any simple io.Reader\") and redundant. It also omits the asterisks before the pointer types of both *os.File and *googleapi.UploadParameters.\n\nLet\u0027s just say:\n\n// Extra configuration can be specified if the provided r is of type *googleapi.UploadParameters.\n\nBut the problem is then it\u0027s not linked in the HTML godoc. That\u0027s why I\u0027d recommended using a named type, similar to http://golang.org/pkg/database/sql/driver/#Value which we only use a documentation type.",
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0da7a2c0_7e3d5de9",
        "filename": "gmail/v1/gmail-gen.go",
        "patchSetId": 10
      },
      "lineNbr": 781,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-07-27T18:14:52Z",
      "side": 1,
      "message": "Got it. I\u0027ve modified it per your suggestion. This provides HTML link from ResumableMedia to googleapi.Reader, but user still has to scroll through the googleapi godoc to find documentation for UploadParameters. Would it make sense to rename Reader and/or UploadParameters so they show up next to each other in the godoc? Perhaps UploadReader and UploadParameters?",
      "parentUuid": "adb5b6f9_3c5cd1c5",
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d4162d7_bfd1d7ca",
        "filename": "gmail/v1/gmail-gen.go",
        "patchSetId": 10
      },
      "lineNbr": 781,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-07-27T20:41:23Z",
      "side": 1,
      "message": "At the risk of dragging the review further: how about changing the signature of ResumableMedia method once again:\n\n    ResumableMedia(context.Context, r io.Reader, opt *googleapi.UploadParameters)\n\nUploadParameters would loose the embedded io.Reader field, and all fields would be optional.\n\nYes, that\u0027s one extra parameter in the method, but it provides direct godoc link to UploadParameters (as opposed to indirect via googleapi.Reader), and I think it\u0027s easier to understand. You pass nil for ptr if you don\u0027t want to configure any additional parameters. It\u0027s also equally extensible as the previous solution.\n\nI am fine either way, but wanted to bring this up. Thoughts?",
      "parentUuid": "0da7a2c0_7e3d5de9",
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dae5efb_f2048821",
        "filename": "gmail/v1/gmail-gen.go",
        "patchSetId": 10
      },
      "lineNbr": 781,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-07-28T07:02:10Z",
      "side": 1,
      "message": "Another option is to make this a variadic function which takes 0 or more googleapi.UploadOptions (a new interface that you could define), analogous to the ReadOptions in the bigtable API: http://godoc.org/google.golang.org/cloud/bigtable#Table.ReadRow\n\nFor each type of UploadOption, you can have a function which returns it, which generates good godoc.\n\nThis way, users that don\u0027t care about extra configuration can elide the optional args and just pass a context and an io.Reader (they don\u0027t even need to pass nil).",
      "parentUuid": "0d4162d7_bfd1d7ca",
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dae5efb_5bebef18",
        "filename": "googleapi/fake_readerat.go",
        "patchSetId": 10
      },
      "lineNbr": 68,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-07-29T05:41:11Z",
      "side": 1,
      "message": "I think it\u0027s worth considering simplifying this code by only allocating a new buffer if\n\noff \u003e\u003d r.pos + len(r.buf)\n\nat the beginning of this function.\n\nThis would mean returning a result (n) which is less than size in some cases, but in most cases the client of this code will be reading whole chunks at a time, and successfully uploading them, so this should be rare.\n\nThe benefit of this would be that\n\n(a) this code would be a lot simpler\n(b) it would probably help fix the bug you mentioned with the buffer being released too early.",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 21
      },
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dae5efb_c6c8a251",
        "filename": "googleapi/fake_readerat.go",
        "patchSetId": 10
      },
      "lineNbr": 68,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-07-29T15:02:27Z",
      "side": 1,
      "message": "Yeah, I don\u0027t like that idea - that would also mean that in some (rare) scenarios EOF would not be detected early enough, which means that Content-Range header would be set incorrectly and upload would fail. \n\nI\u0027ve introduced new fakeReader.ReleaseAt(off int64) method, which controls when the buffer content gets marked for release. That fixed the aforementioned bug and also made SizeAt() method a lot simpler. This will be part of the next change set.",
      "parentUuid": "6dae5efb_5bebef18",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 21
      },
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed788e71_b65228b6",
        "filename": "googleapi/fake_readerat.go",
        "patchSetId": 10
      },
      "lineNbr": 68,
      "author": {
        "id": 5505
      },
      "writtenOn": "2015-07-30T03:16:00Z",
      "side": 1,
      "message": "Never mind; I just saw this:\n(from https://cloud.google.com/storage/docs/concepts-techniques):\n\n\"The sizes of all the blocks written, except the final block, must be a multiple of 256K bytes\".\n\nI guess you already knew that since you are rounding chunk sizes up to the nearest multiple of 256K.  There\u0027s no point doing as I suggested if it\u0027s not possible upload \u003c256K chunks.\n\nOh well, I look forward to seeing your next change.",
      "parentUuid": "6dae5efb_c6c8a251",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 21
      },
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0da5e2c6_dfb95b69",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 10
      },
      "lineNbr": 321,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-07-27T03:35:34Z",
      "side": 1,
      "message": "This would be named \"FakeReader\" and not Rdr, and it would end in a period at the end of the sentence, but why do we even need this field?\n\nThis is exposed API so it must make sense to people. It feels like an internal detail. If you need to know the type of something, can\u0027t you just do a type assertion?",
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0da7a2c0_7e8b9d28",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 10
      },
      "lineNbr": 321,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-07-27T18:14:52Z",
      "side": 1,
      "message": "Yes, all of FakeReader stuff is very much internal implementation detail. I\u0027ve had it public initially because it was used from generated code, but I was able to hide it all now since I introduced ResumableUpload.Configure method.\n\nThat said, the entire ResumableUpload struct and its methods are all implementation details, and so is much other code in this package. The core issue is that the implementation is split between generated code and the googleapi package. I suspect new google.golang.org/api/internal package needs to be introduced, and bunch of public stuff from googleapi moved there.",
      "parentUuid": "0da5e2c6_dfb95b69",
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adb5b6f9_5c5f9dbc",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 10
      },
      "lineNbr": 531,
      "author": {
        "id": 5201
      },
      "writtenOn": "2015-07-27T03:35:34Z",
      "side": 1,
      "message": "We only use shifts of 10, 20, 30 (KB, MB, GB), so this would be:\n\n256 \u003c\u003c 10\n\nAnd you can drop the comment then.",
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0da7a2c0_1efb718a",
        "filename": "googleapi/googleapi.go",
        "patchSetId": 10
      },
      "lineNbr": 531,
      "author": {
        "id": 5815
      },
      "writtenOn": "2015-07-27T18:14:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "adb5b6f9_5c5f9dbc",
      "revId": "5ad9b77e8a034f04d65d18cbd8e73db52b8728dd",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}