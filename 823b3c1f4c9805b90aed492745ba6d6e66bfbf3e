{
  "comments": [
    {
      "key": {
        "uuid": "e89fd7ca_6dc9d556",
        "filename": "iterator/examples_test.go",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T22:02:42Z",
      "side": 1,
      "message": "thanks for the thoughtful examples. these are great.",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_ad1c5dd3",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T22:02:42Z",
      "side": 1,
      "message": "hm, does this mean no more items on the server? or in a local buffer? \ncan we update the comment + err string to be more clear?",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_2d922d53",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-24T22:52:54Z",
      "side": 1,
      "message": "Stole the comment from pubsub.Done.",
      "parentUuid": "e89fd7ca_ad1c5dd3",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_f08c7ee4",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T23:09:30Z",
      "side": 1,
      "message": "hm, but instead of copying the vague string over, can we modify both to be more explicit? I don\u0027t think that \"pubsub does it this way\" is a good enough argument for not adding clarity.",
      "parentUuid": "e89fd7ca_2d922d53",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "853726da_726e9832",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-25T01:58:58Z",
      "side": 1,
      "message": "I\u0027m not sure what you\u0027re looking for here. Since there is no widely used term for this concept in Go, or programming languages in general, I don\u0027t think there is a perfectly unambiguous way of saying it.\n\nI wasn\u0027t so much copying from pubsub as copying from djd and mcgreevy, who\u0027ve been down this road. Here\u0027s some other prior art:\n\nPython: \"no remaining values\" (https://docs.python.org/3/c-api/iter.html)\nScala: \"no more elements to return\" (http://www.scala-lang.org/docu/files/collections-api/collections_43.html)\nJava: \"iteration has no more elements\" (https://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html)\nRuby: \"the position reached at the end\" [sic] (http://ruby-doc.org/core-1.9.3/Enumerator.html)\nJavascript (via MDN): \"past the end of the iterated sequence\" (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\nAnd of course Go: \"there is no next result row\" (https://golang.org/pkg/database/sql/#Rows.Next)\n\nDo you have a preference?",
      "parentUuid": "e89fd7ca_f08c7ee4",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85d3a6ea_55059e6f",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-25T18:45:58Z",
      "side": 1,
      "message": "Ah I see.\nMaybe just adding the word \"buffer\" to the comment? It\u0027s just that, as an outsider, I wasn\u0027t sure on first read if this \"Done\" error was indicating that we are \"Done\" in regards to the remote set of items, or the local set.\nOf course, if you don\u0027t think it\u0027s important, don\u0027t worry about it.",
      "parentUuid": "853726da_726e9832",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85d3a6ea_75b0e289",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-25T19:29:39Z",
      "side": 1,
      "message": "Done means completely done, not just that the buffer is empty. I\u0027ll try to make that clear in the comment. I don\u0027t think the error message is as important, since hopefully users will just use iterator.Done.",
      "parentUuid": "85d3a6ea_55059e6f",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_6d81d5a5",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T22:02:42Z",
      "side": 1,
      "message": "I think a comment here would be appropriate, describing why calling Next and NextPage on the same iterator is an error",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_6d8c3537",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-24T22:52:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e89fd7ca_6d81d5a5",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_6dfd55cc",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 5201
      },
      "writtenOn": "2016-08-24T22:01:40Z",
      "side": 1,
      "message": "do we want contexts here?",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_8d0d2142",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T22:02:42Z",
      "side": 1,
      "message": "this field feels out of place. fetch is not \"information about the iterator\u0027s paging state\".\nsee comment below about de-bloating this type.",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_d07d02e1",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-24T22:52:54Z",
      "side": 1,
      "message": "Not necessary. Every iterator stores its context when created, so these will be closures over it.",
      "parentUuid": "e89fd7ca_6dfd55cc",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_cdc5695e",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-24T22:52:54Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "e89fd7ca_8d0d2142",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_ed8dc587",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T22:02:42Z",
      "side": 1,
      "message": "can you add to the comment that these bools are used to check if the two functions have been mixed?",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_edc02550",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-24T22:52:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e89fd7ca_ed8dc587",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_adfe1dcd",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 5201
      },
      "writtenOn": "2016-08-24T22:01:40Z",
      "side": 1,
      "message": "We could hide this away in another package. And we probably should, since there\u0027s stuff in here people will read.\n\nThis package would have a func init() which registered a private \"newPageInfo\" with the iterator/iterinternals (innard junk) package, which would expose it via a capitalized NewPageInfo which called the func variable in init. Generated or vkit hand-written code would then use the iterinternals.NewPageInfo instead.\n\nTo break the circular dependency, in lieu of type aliases, the signature would have to omit the *PageInfo type and use something like:\n\n   // PageInfo is always an *interator.PageInfo.\n   type PageInfo interface{}\n\nAnd then the caller would have to do the pageInfo.(*iterator.PageInfo).\n\nLittle gross, but cleans up docs and isn\u0027t even inefficient, since it\u0027s just a pointer in an interface.\n\nAlternatively, we could reverse the dependency and avoid the type-in-empty-interface hack by doing something like:\n\n   package iterators\n\n   // InternalGuts exposes internals for generated code.\n   // It is not a stable interface.\n   var InternalGuts \u003d internalGuts\n\n   func internalGuts(x ...interface{}) {\n        if argsLookLikeNewIterator(x) {\n              return newPageInfo(x[0].(type), x[1].(type), x[2].(type))\n        }\n   }\n\nAnd then you can make\n\n    package iterinternals\n\n    import (\n                \"google.golang.org/api/iterator\"\n    )\n\n    func NewIterator(...) *iterator.PageInfo {\n          return iterator.InternalGuts(arg, arg, arg)\n    }",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_4dd7b917",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-24T22:52:54Z",
      "side": 1,
      "message": "If the goal is to hide the doc, doesn\u0027t it suffice to do\n\n  // For internal use only.\n  var Whatevs \u003d whatevs\n\n  // Real doc here.\n  func whatevs() {}\n\nPeople who care can read the source. It\u0027s not like that\u0027s hard: one click away from the doc for Whatevs.",
      "parentUuid": "e89fd7ca_adfe1dcd",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_70988e11",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 5201
      },
      "writtenOn": "2016-08-24T23:02:12Z",
      "side": 1,
      "message": "Yeah, that\u0027s much simpler for this case.",
      "parentUuid": "e89fd7ca_4dd7b917",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85d3a6ea_b595ead9",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-25T19:29:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e89fd7ca_70988e11",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_4dc859c2",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T22:02:42Z",
      "side": 1,
      "message": "this comment is not very helpful. was it just intended just to be for you?",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_4d0e99e7",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-24T22:52:54Z",
      "side": 1,
      "message": "No, it\u0027s the postcondition of the function. But I repeated that below.\n\nImproved the doc.",
      "parentUuid": "e89fd7ca_4dc859c2",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_0d1ad172",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T22:02:42Z",
      "side": 1,
      "message": "it feels very strange to me that something called \"PageInfo\" is pulling down the next set of items. I think this type may be a bit bloated. \nPerhaps we can break all of this fetching logic away from PageInfo onto a different type? Maybe a parent type encapsulating a PageInfo.",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_ade45d10",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-24T22:52:54Z",
      "side": 1,
      "message": "PageInfo is doing double duty, as a place for users to mess with paging state, and as support for Pager.NextPage (and an iterator\u0027s Next method, optionally). That is not nice, I agree. Pulling those two functions apart may be hard without introducing more exported names. \n\nRe your suggestion of putting the logic in a type containing PageInfo: the logic is needed by Pager, which accepts anything that supports an interface. To keep that compile-time typecheck, both the parent type and the method returning it would have to be exported.\n\nWe could reverse it and put those functions into a type contained within PageInfo. I think that would feel like an unnecessary abstraction layer.\n\nMeanwhile, I\u0027ll send you a link to the thread where Brad sketches this design. We\u0027re admittedly doing some urky stuff to keep the exported iterator surface to a minimum.",
      "parentUuid": "e89fd7ca_0d1ad172",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_f0359ef8",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T23:09:30Z",
      "side": 1,
      "message": "i think that adding one more exported type for this behavior is worth it. the reduction in clarity is not worth the smaller surface area. this type is doing too much.\nhappy to argue my case with whoever is pushing for the tiny surface area.",
      "parentUuid": "e89fd7ca_ade45d10",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "853726da_52739416",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-25T01:58:58Z",
      "side": 1,
      "message": "That would be Brad. I do recommend discussing this with him.\n\nJust to try to make the case myself: it\u0027s not so much an exported type in this package, as what it would involve for every iterator. In addition to PageInfo, which every iterator must expose (either as a field or method), this other thing (PageState?) would have to be available via an interface method for Pager to use it. That method would be mystifying to users -- it\u0027s there only to give Pager.NextPage access to the iterator\u0027s buffer. But the method would show up in the godoc for every iterator (4 in logging alone) with a doc comment that would basically say \"nothing to see here, move on\". \n\nThe alternative is a little internal conceptual ugliness.\n\nOf course, it\u0027s always possible that there is a better way to do this. I just don\u0027t see it.",
      "parentUuid": "e89fd7ca_f0359ef8",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85d3a6ea_556efe31",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-25T18:45:58Z",
      "side": 1,
      "message": "I see. Thanks for the explanation.\nI\u0027ll suggest vaguely a rename of PageInfo? PageState might suit this functionality better, though not perfectly either.\nBut of course, I may be splitting hairs here. Perhaps this is not super important.",
      "parentUuid": "853726da_52739416",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85d3a6ea_9598e610",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-25T19:29:39Z",
      "side": 1,
      "message": "Yes, PageState was in the running, but from the user\u0027s POV, I think PageInfo makes more sense. I agree, we\u0027re in hairsplit territory now.",
      "parentUuid": "85d3a6ea_556efe31",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_8dea4103",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 5201
      },
      "writtenOn": "2016-08-24T22:01:40Z",
      "side": 1,
      "message": "docs?",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_d087c20b",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-24T22:52:54Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "e89fd7ca_8dea4103",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_0da5b1f6",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T22:02:42Z",
      "side": 1,
      "message": "hm, isn\u0027t it possible that vslicep could be a nil slice? in which case, i think this Set call on the elem would panic, wouldn\u0027t it?",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_b06e762f",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-24T22:52:54Z",
      "side": 1,
      "message": "I turned some of the panics to errors. Checking the type is harder -- I think it requires another arg to NewPage. Not sure it\u0027s worth it.",
      "parentUuid": "e89fd7ca_0da5b1f6",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89fd7ca_704a4e85",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 8310
      },
      "writtenOn": "2016-08-24T23:09:30Z",
      "side": 1,
      "message": "you can just check \"if !e.CanSet() { /* return error */ }\"",
      "parentUuid": "e89fd7ca_b06e762f",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "853726da_d25e647d",
        "filename": "iterator/iterator.go",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 7715
      },
      "writtenOn": "2016-08-25T01:58:58Z",
      "side": 1,
      "message": "I don\u0027t think that would catch all the cases, like a pointer to some non-slice type. \n\nAnyway, I figured out a way to get the exact type we want.",
      "parentUuid": "e89fd7ca_704a4e85",
      "revId": "823b3c1f4c9805b90aed492745ba6d6e66bfbf3e",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}